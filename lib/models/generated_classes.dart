// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison

// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the SupaDart configuration.

// SDK
import 'package:supabase_flutter/supabase_flutter.dart';

// INTL is an official package from Dart and is used for parsing dates
// flutter pub add intl or dart pub add intl
import 'package:intl/intl.dart';

// No Dart Convert needed
// Supadart Class
abstract class SupadartClass<T> {
  static Map<String, dynamic> insert(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  static Map<String, dynamic> update(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  factory SupadartClass.fromJson(Map<String, dynamic> json) {
    throw UnimplementedError();
  }

  static converter(List<Map<String, dynamic>> data) {
    throw UnimplementedError();
  }

  static converterSingle(Map<String, dynamic> data) {
    throw UnimplementedError();
  }
}

// Supabase Client Extension
extension SupadartClient on SupabaseClient {
  SupabaseQueryBuilder get course => from('course');
  SupabaseQueryBuilder get event => from('event');
  SupabaseQueryBuilder get tag_scan => from('tag_scan');
  SupabaseQueryBuilder get v_for_student_home => from('v_for_student_home');
  SupabaseQueryBuilder get profiles => from('profiles');
  SupabaseQueryBuilder get block => from('block');
  SupabaseQueryBuilder get student => from('student');
  SupabaseQueryBuilder get teacher_assignment => from('teacher_assignment');
  SupabaseQueryBuilder get v_attendance_section_tags_times =>
      from('v_attendance_section_tags_times');
  SupabaseQueryBuilder get section => from('section');
  SupabaseQueryBuilder get student_enrolment => from('student_enrolment');
  SupabaseQueryBuilder get calendar => from('calendar');
  SupabaseQueryBuilder get tag_assignment => from('tag_assignment');
  SupabaseQueryBuilder get v_for_teacher_home => from('v_for_teacher_home');
  SupabaseQueryBuilder get user_role => from('user_role');
  SupabaseQueryBuilder get messages => from('messages');
  SupabaseQueryBuilder get school_term => from('school_term');
  SupabaseQueryBuilder get tag => from('tag');
  SupabaseQueryBuilder get teacher => from('teacher');
  SupabaseQueryBuilder get school_day_type => from('school_day_type');
  SupabaseQueryBuilder get attendance => from('attendance');
}

// Supabase Storage Client Extension
extension SupadartStorageClient on SupabaseStorageClient {}

// Enums
enum ROLE_ENUM { superuser, admin, principal, teacher, student, guest }

// Utils
class Course implements SupadartClass<Course> {
  final BigInt id;
  final DateTime createdAt;
  final String code;
  final String? name;

  const Course({
    required this.id,
    required this.createdAt,
    required this.code,
    this.name,
  });

  static String get table_name => 'course';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_code => 'code';
  static String get c_name => 'name';

  static List<Course> converter(List<Map<String, dynamic>> data) {
    return data.map(Course.fromJson).toList();
  }

  static Course converterSingle(Map<String, dynamic> data) {
    return Course.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? code,
    String? name,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (code != null) 'code': code,
      if (name != null) 'name': name,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    required String code,
    String? name,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      code: code,
      name: name,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? code,
    String? name,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      code: code,
      name: name,
    );
  }

  factory Course.fromJson(Map<String, dynamic> jsonn) {
    return Course(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      code: jsonn['code'] != null ? jsonn['code'].toString() : '',
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      code: code,
      name: name,
    );
  }
}

class Event implements SupadartClass<Event> {
  final BigInt id;
  final DateTime createdAt;
  final String name;

  const Event({
    required this.id,
    required this.createdAt,
    required this.name,
  });

  static String get table_name => 'event';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_name => 'name';

  static List<Event> converter(List<Map<String, dynamic>> data) {
    return data.map(Event.fromJson).toList();
  }

  static Event converterSingle(Map<String, dynamic> data) {
    return Event.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? name,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (name != null) 'name': name,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    String? name,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? name,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
    );
  }

  factory Event.fromJson(Map<String, dynamic> jsonn) {
    return Event(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
    );
  }
}

class TagScan implements SupadartClass<TagScan> {
  final BigInt id;
  final DateTime createdAt;
  final DateTime scanTime;
  final BigInt? tagId;
  final String studentId;

  const TagScan({
    required this.id,
    required this.createdAt,
    required this.scanTime,
    this.tagId,
    required this.studentId,
  });

  static String get table_name => 'tag_scan';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_scanTime => 'scan_time';
  static String get c_tagId => 'tag_id';
  static String get c_studentId => 'student_id';

  static List<TagScan> converter(List<Map<String, dynamic>> data) {
    return data.map(TagScan.fromJson).toList();
  }

  static TagScan converterSingle(Map<String, dynamic> data) {
    return TagScan.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    DateTime? scanTime,
    BigInt? tagId,
    String? studentId,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (scanTime != null) 'scan_time': scanTime.toUtc().toIso8601String(),
      if (tagId != null) 'tag_id': tagId.toString(),
      if (studentId != null) 'student_id': studentId,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    required DateTime scanTime,
    BigInt? tagId,
    required String studentId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      scanTime: scanTime,
      tagId: tagId,
      studentId: studentId,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    DateTime? scanTime,
    BigInt? tagId,
    String? studentId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      scanTime: scanTime,
      tagId: tagId,
      studentId: studentId,
    );
  }

  factory TagScan.fromJson(Map<String, dynamic> jsonn) {
    return TagScan(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      scanTime: jsonn['scan_time'] != null
          ? DateTime.parse(jsonn['scan_time'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      tagId: jsonn['tag_id'] != null
          ? BigInt.parse(jsonn['tag_id'].toString())
          : BigInt.from(0),
      studentId:
          jsonn['student_id'] != null ? jsonn['student_id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      scanTime: scanTime,
      tagId: tagId,
      studentId: studentId,
    );
  }
}

class VForStudentHome implements SupadartClass<VForStudentHome> {
  final DateTime? date;
  final String? studentNumber;
  final String? sectionCode;
  final DateTime? startTime;
  final DateTime? endTime;
  final String? block;
  final String? studentId;

  const VForStudentHome({
    this.date,
    this.studentNumber,
    this.sectionCode,
    this.startTime,
    this.endTime,
    this.block,
    this.studentId,
  });

  static String get table_name => 'v_for_student_home';
  static String get c_date => 'date';
  static String get c_studentNumber => 'student_number';
  static String get c_sectionCode => 'section_code';
  static String get c_startTime => 'start_time';
  static String get c_endTime => 'end_time';
  static String get c_block => 'block';
  static String get c_studentId => 'student_id';

  static List<VForStudentHome> converter(List<Map<String, dynamic>> data) {
    return data.map(VForStudentHome.fromJson).toList();
  }

  static VForStudentHome converterSingle(Map<String, dynamic> data) {
    return VForStudentHome.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    DateTime? date,
    String? studentNumber,
    String? sectionCode,
    DateTime? startTime,
    DateTime? endTime,
    String? block,
    String? studentId,
  }) {
    return {
      if (date != null) 'date': date.toIso8601String(),
      if (studentNumber != null) 'student_number': studentNumber,
      if (sectionCode != null) 'section_code': sectionCode,
      if (startTime != null)
        'start_time': DateFormat('HH:mm:ss.SSS').format(startTime),
      if (endTime != null)
        'end_time': DateFormat('HH:mm:ss.SSS').format(endTime),
      if (block != null) 'block': block,
      if (studentId != null) 'student_id': studentId,
    };
  }

  static Map<String, dynamic> insert({
    DateTime? date,
    String? studentNumber,
    String? sectionCode,
    DateTime? startTime,
    DateTime? endTime,
    String? block,
    String? studentId,
  }) {
    return _generateMap(
      date: date,
      studentNumber: studentNumber,
      sectionCode: sectionCode,
      startTime: startTime,
      endTime: endTime,
      block: block,
      studentId: studentId,
    );
  }

  static Map<String, dynamic> update({
    DateTime? date,
    String? studentNumber,
    String? sectionCode,
    DateTime? startTime,
    DateTime? endTime,
    String? block,
    String? studentId,
  }) {
    return _generateMap(
      date: date,
      studentNumber: studentNumber,
      sectionCode: sectionCode,
      startTime: startTime,
      endTime: endTime,
      block: block,
      studentId: studentId,
    );
  }

  factory VForStudentHome.fromJson(Map<String, dynamic> jsonn) {
    return VForStudentHome(
      date: jsonn['date'] != null
          ? DateTime.parse(jsonn['date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      studentNumber: jsonn['student_number'] != null
          ? jsonn['student_number'].toString()
          : '',
      sectionCode:
          jsonn['section_code'] != null ? jsonn['section_code'].toString() : '',
      startTime: jsonn['start_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['start_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
      endTime: jsonn['end_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['end_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
      block: jsonn['block'] != null ? jsonn['block'].toString() : '',
      studentId:
          jsonn['student_id'] != null ? jsonn['student_id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      date: date,
      studentNumber: studentNumber,
      sectionCode: sectionCode,
      startTime: startTime,
      endTime: endTime,
      block: block,
      studentId: studentId,
    );
  }
}

class Profiles implements SupadartClass<Profiles> {
  final String? id;
  final String? email;
  final String? firstName;
  final String? lastName;
  final String? studentNumber;
  final ROLE_ENUM? role;

  const Profiles({
    this.id,
    this.email,
    this.firstName,
    this.lastName,
    this.studentNumber,
    this.role,
  });

  static String get table_name => 'profiles';
  static String get c_id => 'id';
  static String get c_email => 'email';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_studentNumber => 'student_number';
  static String get c_role => 'role';

  static List<Profiles> converter(List<Map<String, dynamic>> data) {
    return data.map(Profiles.fromJson).toList();
  }

  static Profiles converterSingle(Map<String, dynamic> data) {
    return Profiles.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? email,
    String? firstName,
    String? lastName,
    String? studentNumber,
    ROLE_ENUM? role,
  }) {
    return {
      if (id != null) 'id': id,
      if (email != null) 'email': email,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (studentNumber != null) 'student_number': studentNumber,
      if (role != null) 'role': role.toString().split('.').last,
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? email,
    String? firstName,
    String? lastName,
    String? studentNumber,
    ROLE_ENUM? role,
  }) {
    return _generateMap(
      id: id,
      email: email,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      role: role,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? email,
    String? firstName,
    String? lastName,
    String? studentNumber,
    ROLE_ENUM? role,
  }) {
    return _generateMap(
      id: id,
      email: email,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      role: role,
    );
  }

  factory Profiles.fromJson(Map<String, dynamic> jsonn) {
    return Profiles(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      email: jsonn['email'] != null ? jsonn['email'].toString() : '',
      firstName:
          jsonn['first_name'] != null ? jsonn['first_name'].toString() : '',
      lastName: jsonn['last_name'] != null ? jsonn['last_name'].toString() : '',
      studentNumber: jsonn['student_number'] != null
          ? jsonn['student_number'].toString()
          : '',
      role: jsonn['role'] != null
          ? ROLE_ENUM.values.byName(jsonn['role'].toString())
          : ROLE_ENUM.values.first,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      email: email,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      role: role,
    );
  }
}

class Block implements SupadartClass<Block> {
  final BigInt id;
  final DateTime createdAt;
  final String name;
  final DateTime startTime;
  final DateTime endTime;
  final BigInt? dayTypeId;

  const Block({
    required this.id,
    required this.createdAt,
    required this.name,
    required this.startTime,
    required this.endTime,
    this.dayTypeId,
  });

  static String get table_name => 'block';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_name => 'name';
  static String get c_startTime => 'start_time';
  static String get c_endTime => 'end_time';
  static String get c_dayTypeId => 'day_type_id';

  static List<Block> converter(List<Map<String, dynamic>> data) {
    return data.map(Block.fromJson).toList();
  }

  static Block converterSingle(Map<String, dynamic> data) {
    return Block.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? name,
    DateTime? startTime,
    DateTime? endTime,
    BigInt? dayTypeId,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (name != null) 'name': name,
      if (startTime != null)
        'start_time': DateFormat('HH:mm:ss.SSS').format(startTime),
      if (endTime != null)
        'end_time': DateFormat('HH:mm:ss.SSS').format(endTime),
      if (dayTypeId != null) 'day_type_id': dayTypeId.toString(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    required String name,
    DateTime? startTime,
    DateTime? endTime,
    BigInt? dayTypeId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
      startTime: startTime,
      endTime: endTime,
      dayTypeId: dayTypeId,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? name,
    DateTime? startTime,
    DateTime? endTime,
    BigInt? dayTypeId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
      startTime: startTime,
      endTime: endTime,
      dayTypeId: dayTypeId,
    );
  }

  factory Block.fromJson(Map<String, dynamic> jsonn) {
    return Block(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      startTime: jsonn['start_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['start_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
      endTime: jsonn['end_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['end_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
      dayTypeId: jsonn['day_type_id'] != null
          ? BigInt.parse(jsonn['day_type_id'].toString())
          : BigInt.from(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
      startTime: startTime,
      endTime: endTime,
      dayTypeId: dayTypeId,
    );
  }
}

class Student implements SupadartClass<Student> {
  final DateTime createdAt;
  final String? firstName;
  final String? lastName;
  final String studentNumber;
  final String email;
  final String id;

  const Student({
    required this.createdAt,
    this.firstName,
    this.lastName,
    required this.studentNumber,
    required this.email,
    required this.id,
  });

  static String get table_name => 'student';
  static String get c_createdAt => 'created_at';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_studentNumber => 'student_number';
  static String get c_email => 'email';
  static String get c_id => 'id';

  static List<Student> converter(List<Map<String, dynamic>> data) {
    return data.map(Student.fromJson).toList();
  }

  static Student converterSingle(Map<String, dynamic> data) {
    return Student.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    DateTime? createdAt,
    String? firstName,
    String? lastName,
    String? studentNumber,
    String? email,
    String? id,
  }) {
    return {
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (studentNumber != null) 'student_number': studentNumber,
      if (email != null) 'email': email,
      if (id != null) 'id': id,
    };
  }

  static Map<String, dynamic> insert({
    DateTime? createdAt,
    String? firstName,
    String? lastName,
    String? studentNumber,
    required String email,
    String? id,
  }) {
    return _generateMap(
      createdAt: createdAt,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      email: email,
      id: id,
    );
  }

  static Map<String, dynamic> update({
    DateTime? createdAt,
    String? firstName,
    String? lastName,
    String? studentNumber,
    String? email,
    String? id,
  }) {
    return _generateMap(
      createdAt: createdAt,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      email: email,
      id: id,
    );
  }

  factory Student.fromJson(Map<String, dynamic> jsonn) {
    return Student(
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      firstName:
          jsonn['first_name'] != null ? jsonn['first_name'].toString() : '',
      lastName: jsonn['last_name'] != null ? jsonn['last_name'].toString() : '',
      studentNumber: jsonn['student_number'] != null
          ? jsonn['student_number'].toString()
          : '',
      email: jsonn['email'] != null ? jsonn['email'].toString() : '',
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      createdAt: createdAt,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      email: email,
      id: id,
    );
  }
}

class TeacherAssignment implements SupadartClass<TeacherAssignment> {
  final BigInt id;
  final DateTime createdAt;
  final BigInt sectionId;
  final BigInt schoolTermId;
  final String teacherId;

  const TeacherAssignment({
    required this.id,
    required this.createdAt,
    required this.sectionId,
    required this.schoolTermId,
    required this.teacherId,
  });

  static String get table_name => 'teacher_assignment';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_sectionId => 'section_id';
  static String get c_schoolTermId => 'school_term_id';
  static String get c_teacherId => 'teacher_id';

  static List<TeacherAssignment> converter(List<Map<String, dynamic>> data) {
    return data.map(TeacherAssignment.fromJson).toList();
  }

  static TeacherAssignment converterSingle(Map<String, dynamic> data) {
    return TeacherAssignment.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    BigInt? sectionId,
    BigInt? schoolTermId,
    String? teacherId,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (sectionId != null) 'section_id': sectionId.toString(),
      if (schoolTermId != null) 'school_term_id': schoolTermId.toString(),
      if (teacherId != null) 'teacher_id': teacherId,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    required BigInt sectionId,
    required BigInt schoolTermId,
    required String teacherId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionId: sectionId,
      schoolTermId: schoolTermId,
      teacherId: teacherId,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    BigInt? sectionId,
    BigInt? schoolTermId,
    String? teacherId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionId: sectionId,
      schoolTermId: schoolTermId,
      teacherId: teacherId,
    );
  }

  factory TeacherAssignment.fromJson(Map<String, dynamic> jsonn) {
    return TeacherAssignment(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      sectionId: jsonn['section_id'] != null
          ? BigInt.parse(jsonn['section_id'].toString())
          : BigInt.from(0),
      schoolTermId: jsonn['school_term_id'] != null
          ? BigInt.parse(jsonn['school_term_id'].toString())
          : BigInt.from(0),
      teacherId:
          jsonn['teacher_id'] != null ? jsonn['teacher_id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionId: sectionId,
      schoolTermId: schoolTermId,
      teacherId: teacherId,
    );
  }
}

class VAttendanceSectionTagsTimes
    implements SupadartClass<VAttendanceSectionTagsTimes> {
  final BigInt? attendanceId;
  final DateTime? date;
  final String? studentId;
  final String? studentNumber;
  final BigInt? tagId;
  final String? tagUid;
  final String? sectionCode;
  final BigInt? sectionId;
  final DateTime? startTime;
  final DateTime? endTime;

  const VAttendanceSectionTagsTimes({
    this.attendanceId,
    this.date,
    this.studentId,
    this.studentNumber,
    this.tagId,
    this.tagUid,
    this.sectionCode,
    this.sectionId,
    this.startTime,
    this.endTime,
  });

  static String get table_name => 'v_attendance_section_tags_times';
  static String get c_attendanceId => 'attendance_id';
  static String get c_date => 'date';
  static String get c_studentId => 'student_id';
  static String get c_studentNumber => 'student_number';
  static String get c_tagId => 'tag_id';
  static String get c_tagUid => 'tag_uid';
  static String get c_sectionCode => 'section_code';
  static String get c_sectionId => 'section_id';
  static String get c_startTime => 'start_time';
  static String get c_endTime => 'end_time';

  static List<VAttendanceSectionTagsTimes> converter(
      List<Map<String, dynamic>> data) {
    return data.map(VAttendanceSectionTagsTimes.fromJson).toList();
  }

  static VAttendanceSectionTagsTimes converterSingle(
      Map<String, dynamic> data) {
    return VAttendanceSectionTagsTimes.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? attendanceId,
    DateTime? date,
    String? studentId,
    String? studentNumber,
    BigInt? tagId,
    String? tagUid,
    String? sectionCode,
    BigInt? sectionId,
    DateTime? startTime,
    DateTime? endTime,
  }) {
    return {
      if (attendanceId != null) 'attendance_id': attendanceId.toString(),
      if (date != null) 'date': date.toIso8601String(),
      if (studentId != null) 'student_id': studentId,
      if (studentNumber != null) 'student_number': studentNumber,
      if (tagId != null) 'tag_id': tagId.toString(),
      if (tagUid != null) 'tag_uid': tagUid,
      if (sectionCode != null) 'section_code': sectionCode,
      if (sectionId != null) 'section_id': sectionId.toString(),
      if (startTime != null)
        'start_time': DateFormat('HH:mm:ss.SSS').format(startTime),
      if (endTime != null)
        'end_time': DateFormat('HH:mm:ss.SSS').format(endTime),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? attendanceId,
    DateTime? date,
    String? studentId,
    String? studentNumber,
    BigInt? tagId,
    String? tagUid,
    String? sectionCode,
    BigInt? sectionId,
    DateTime? startTime,
    DateTime? endTime,
  }) {
    return _generateMap(
      attendanceId: attendanceId,
      date: date,
      studentId: studentId,
      studentNumber: studentNumber,
      tagId: tagId,
      tagUid: tagUid,
      sectionCode: sectionCode,
      sectionId: sectionId,
      startTime: startTime,
      endTime: endTime,
    );
  }

  static Map<String, dynamic> update({
    BigInt? attendanceId,
    DateTime? date,
    String? studentId,
    String? studentNumber,
    BigInt? tagId,
    String? tagUid,
    String? sectionCode,
    BigInt? sectionId,
    DateTime? startTime,
    DateTime? endTime,
  }) {
    return _generateMap(
      attendanceId: attendanceId,
      date: date,
      studentId: studentId,
      studentNumber: studentNumber,
      tagId: tagId,
      tagUid: tagUid,
      sectionCode: sectionCode,
      sectionId: sectionId,
      startTime: startTime,
      endTime: endTime,
    );
  }

  factory VAttendanceSectionTagsTimes.fromJson(Map<String, dynamic> jsonn) {
    return VAttendanceSectionTagsTimes(
      attendanceId: jsonn['attendance_id'] != null
          ? BigInt.parse(jsonn['attendance_id'].toString())
          : BigInt.from(0),
      date: jsonn['date'] != null
          ? DateTime.parse(jsonn['date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      studentId:
          jsonn['student_id'] != null ? jsonn['student_id'].toString() : '',
      studentNumber: jsonn['student_number'] != null
          ? jsonn['student_number'].toString()
          : '',
      tagId: jsonn['tag_id'] != null
          ? BigInt.parse(jsonn['tag_id'].toString())
          : BigInt.from(0),
      tagUid: jsonn['tag_uid'] != null ? jsonn['tag_uid'].toString() : '',
      sectionCode:
          jsonn['section_code'] != null ? jsonn['section_code'].toString() : '',
      sectionId: jsonn['section_id'] != null
          ? BigInt.parse(jsonn['section_id'].toString())
          : BigInt.from(0),
      startTime: jsonn['start_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['start_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
      endTime: jsonn['end_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['end_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      attendanceId: attendanceId,
      date: date,
      studentId: studentId,
      studentNumber: studentNumber,
      tagId: tagId,
      tagUid: tagUid,
      sectionCode: sectionCode,
      sectionId: sectionId,
      startTime: startTime,
      endTime: endTime,
    );
  }
}

class Section implements SupadartClass<Section> {
  final BigInt id;
  final DateTime createdAt;
  final String sectionNumber;
  final String courseCode;
  final String code;
  final BigInt schoolTermId;
  final BigInt blockId;
  final String? location;

  const Section({
    required this.id,
    required this.createdAt,
    required this.sectionNumber,
    required this.courseCode,
    required this.code,
    required this.schoolTermId,
    required this.blockId,
    this.location,
  });

  static String get table_name => 'section';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_sectionNumber => 'section_number';
  static String get c_courseCode => 'course_code';
  static String get c_code => 'code';
  static String get c_schoolTermId => 'school_term_id';
  static String get c_blockId => 'block_id';
  static String get c_location => 'location';

  static List<Section> converter(List<Map<String, dynamic>> data) {
    return data.map(Section.fromJson).toList();
  }

  static Section converterSingle(Map<String, dynamic> data) {
    return Section.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? sectionNumber,
    String? courseCode,
    String? code,
    BigInt? schoolTermId,
    BigInt? blockId,
    String? location,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (sectionNumber != null) 'section_number': sectionNumber,
      if (courseCode != null) 'course_code': courseCode,
      if (code != null) 'code': code,
      if (schoolTermId != null) 'school_term_id': schoolTermId.toString(),
      if (blockId != null) 'block_id': blockId.toString(),
      if (location != null) 'location': location,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    String? sectionNumber,
    required String courseCode,
    required String code,
    required BigInt schoolTermId,
    required BigInt blockId,
    String? location,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionNumber: sectionNumber,
      courseCode: courseCode,
      code: code,
      schoolTermId: schoolTermId,
      blockId: blockId,
      location: location,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? sectionNumber,
    String? courseCode,
    String? code,
    BigInt? schoolTermId,
    BigInt? blockId,
    String? location,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionNumber: sectionNumber,
      courseCode: courseCode,
      code: code,
      schoolTermId: schoolTermId,
      blockId: blockId,
      location: location,
    );
  }

  factory Section.fromJson(Map<String, dynamic> jsonn) {
    return Section(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      sectionNumber: jsonn['section_number'] != null
          ? jsonn['section_number'].toString()
          : '',
      courseCode:
          jsonn['course_code'] != null ? jsonn['course_code'].toString() : '',
      code: jsonn['code'] != null ? jsonn['code'].toString() : '',
      schoolTermId: jsonn['school_term_id'] != null
          ? BigInt.parse(jsonn['school_term_id'].toString())
          : BigInt.from(0),
      blockId: jsonn['block_id'] != null
          ? BigInt.parse(jsonn['block_id'].toString())
          : BigInt.from(0),
      location: jsonn['location'] != null ? jsonn['location'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionNumber: sectionNumber,
      courseCode: courseCode,
      code: code,
      schoolTermId: schoolTermId,
      blockId: blockId,
      location: location,
    );
  }
}

class StudentEnrolment implements SupadartClass<StudentEnrolment> {
  final BigInt id;
  final DateTime createdAt;
  final BigInt sectionId;
  final BigInt schoolTermId;
  final String studentId;

  const StudentEnrolment({
    required this.id,
    required this.createdAt,
    required this.sectionId,
    required this.schoolTermId,
    required this.studentId,
  });

  static String get table_name => 'student_enrolment';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_sectionId => 'section_id';
  static String get c_schoolTermId => 'school_term_id';
  static String get c_studentId => 'student_id';

  static List<StudentEnrolment> converter(List<Map<String, dynamic>> data) {
    return data.map(StudentEnrolment.fromJson).toList();
  }

  static StudentEnrolment converterSingle(Map<String, dynamic> data) {
    return StudentEnrolment.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    BigInt? sectionId,
    BigInt? schoolTermId,
    String? studentId,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (sectionId != null) 'section_id': sectionId.toString(),
      if (schoolTermId != null) 'school_term_id': schoolTermId.toString(),
      if (studentId != null) 'student_id': studentId,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    required BigInt sectionId,
    required BigInt schoolTermId,
    required String studentId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionId: sectionId,
      schoolTermId: schoolTermId,
      studentId: studentId,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    BigInt? sectionId,
    BigInt? schoolTermId,
    String? studentId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionId: sectionId,
      schoolTermId: schoolTermId,
      studentId: studentId,
    );
  }

  factory StudentEnrolment.fromJson(Map<String, dynamic> jsonn) {
    return StudentEnrolment(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      sectionId: jsonn['section_id'] != null
          ? BigInt.parse(jsonn['section_id'].toString())
          : BigInt.from(0),
      schoolTermId: jsonn['school_term_id'] != null
          ? BigInt.parse(jsonn['school_term_id'].toString())
          : BigInt.from(0),
      studentId:
          jsonn['student_id'] != null ? jsonn['student_id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      sectionId: sectionId,
      schoolTermId: schoolTermId,
      studentId: studentId,
    );
  }
}

class Calendar implements SupadartClass<Calendar> {
  final int id;
  final int termId;
  final DateTime date;
  final bool isSchoolDay;
  final String? reason;

  const Calendar({
    required this.id,
    required this.termId,
    required this.date,
    required this.isSchoolDay,
    this.reason,
  });

  static String get table_name => 'calendar';
  static String get c_id => 'id';
  static String get c_termId => 'term_id';
  static String get c_date => 'date';
  static String get c_isSchoolDay => 'is_school_day';
  static String get c_reason => 'reason';

  static List<Calendar> converter(List<Map<String, dynamic>> data) {
    return data.map(Calendar.fromJson).toList();
  }

  static Calendar converterSingle(Map<String, dynamic> data) {
    return Calendar.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    int? id,
    int? termId,
    DateTime? date,
    bool? isSchoolDay,
    String? reason,
  }) {
    return {
      if (id != null) 'id': id,
      if (termId != null) 'term_id': termId,
      if (date != null) 'date': date.toIso8601String(),
      if (isSchoolDay != null) 'is_school_day': isSchoolDay,
      if (reason != null) 'reason': reason,
    };
  }

  static Map<String, dynamic> insert({
    int? id,
    required int termId,
    required DateTime date,
    bool? isSchoolDay,
    String? reason,
  }) {
    return _generateMap(
      id: id,
      termId: termId,
      date: date,
      isSchoolDay: isSchoolDay,
      reason: reason,
    );
  }

  static Map<String, dynamic> update({
    int? id,
    int? termId,
    DateTime? date,
    bool? isSchoolDay,
    String? reason,
  }) {
    return _generateMap(
      id: id,
      termId: termId,
      date: date,
      isSchoolDay: isSchoolDay,
      reason: reason,
    );
  }

  factory Calendar.fromJson(Map<String, dynamic> jsonn) {
    return Calendar(
      id: jsonn['id'] != null ? int.parse(jsonn['id'].toString()) : 0,
      termId:
          jsonn['term_id'] != null ? int.parse(jsonn['term_id'].toString()) : 0,
      date: jsonn['date'] != null
          ? DateTime.parse(jsonn['date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      isSchoolDay: jsonn['is_school_day'] != null
          ? jsonn['is_school_day'] as bool
          : false,
      reason: jsonn['reason'] != null ? jsonn['reason'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      termId: termId,
      date: date,
      isSchoolDay: isSchoolDay,
      reason: reason,
    );
  }
}

class TagAssignment implements SupadartClass<TagAssignment> {
  final BigInt id;
  final DateTime createdAt;
  final BigInt? tagId;
  final BigInt? sectionId;
  final DateTime? validUntil;

  const TagAssignment({
    required this.id,
    required this.createdAt,
    this.tagId,
    this.sectionId,
    this.validUntil,
  });

  static String get table_name => 'tag_assignment';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_tagId => 'tag_id';
  static String get c_sectionId => 'section_id';
  static String get c_validUntil => 'valid_until';

  static List<TagAssignment> converter(List<Map<String, dynamic>> data) {
    return data.map(TagAssignment.fromJson).toList();
  }

  static TagAssignment converterSingle(Map<String, dynamic> data) {
    return TagAssignment.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    BigInt? tagId,
    BigInt? sectionId,
    DateTime? validUntil,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (tagId != null) 'tag_id': tagId.toString(),
      if (sectionId != null) 'section_id': sectionId.toString(),
      if (validUntil != null)
        'valid_until': validUntil.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    BigInt? tagId,
    BigInt? sectionId,
    DateTime? validUntil,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      tagId: tagId,
      sectionId: sectionId,
      validUntil: validUntil,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    BigInt? tagId,
    BigInt? sectionId,
    DateTime? validUntil,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      tagId: tagId,
      sectionId: sectionId,
      validUntil: validUntil,
    );
  }

  factory TagAssignment.fromJson(Map<String, dynamic> jsonn) {
    return TagAssignment(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      tagId: jsonn['tag_id'] != null
          ? BigInt.parse(jsonn['tag_id'].toString())
          : BigInt.from(0),
      sectionId: jsonn['section_id'] != null
          ? BigInt.parse(jsonn['section_id'].toString())
          : BigInt.from(0),
      validUntil: jsonn['valid_until'] != null
          ? DateTime.parse(jsonn['valid_until'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      tagId: tagId,
      sectionId: sectionId,
      validUntil: validUntil,
    );
  }
}

class VForTeacherHome implements SupadartClass<VForTeacherHome> {
  final String? teacherId;
  final String? sectionCode;
  final DateTime? date;
  final String? studentId;
  final String? firstName;
  final String? lastName;
  final String? studentNumber;
  final DateTime? entryTime;
  final String? block;

  const VForTeacherHome({
    this.teacherId,
    this.sectionCode,
    this.date,
    this.studentId,
    this.firstName,
    this.lastName,
    this.studentNumber,
    this.entryTime,
    this.block,
  });

  static String get table_name => 'v_for_teacher_home';
  static String get c_teacherId => 'teacher_id';
  static String get c_sectionCode => 'section_code';
  static String get c_date => 'date';
  static String get c_studentId => 'student_id';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_studentNumber => 'student_number';
  static String get c_entryTime => 'entry_time';
  static String get c_block => 'block';

  static List<VForTeacherHome> converter(List<Map<String, dynamic>> data) {
    return data.map(VForTeacherHome.fromJson).toList();
  }

  static VForTeacherHome converterSingle(Map<String, dynamic> data) {
    return VForTeacherHome.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? teacherId,
    String? sectionCode,
    DateTime? date,
    String? studentId,
    String? firstName,
    String? lastName,
    String? studentNumber,
    DateTime? entryTime,
    String? block,
  }) {
    return {
      if (teacherId != null) 'teacher_id': teacherId,
      if (sectionCode != null) 'section_code': sectionCode,
      if (date != null) 'date': date.toIso8601String(),
      if (studentId != null) 'student_id': studentId,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (studentNumber != null) 'student_number': studentNumber,
      if (entryTime != null) 'entry_time': entryTime.toUtc().toIso8601String(),
      if (block != null) 'block': block,
    };
  }

  static Map<String, dynamic> insert({
    String? teacherId,
    String? sectionCode,
    DateTime? date,
    String? studentId,
    String? firstName,
    String? lastName,
    String? studentNumber,
    DateTime? entryTime,
    String? block,
  }) {
    return _generateMap(
      teacherId: teacherId,
      sectionCode: sectionCode,
      date: date,
      studentId: studentId,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      entryTime: entryTime,
      block: block,
    );
  }

  static Map<String, dynamic> update({
    String? teacherId,
    String? sectionCode,
    DateTime? date,
    String? studentId,
    String? firstName,
    String? lastName,
    String? studentNumber,
    DateTime? entryTime,
    String? block,
  }) {
    return _generateMap(
      teacherId: teacherId,
      sectionCode: sectionCode,
      date: date,
      studentId: studentId,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      entryTime: entryTime,
      block: block,
    );
  }

  factory VForTeacherHome.fromJson(Map<String, dynamic> jsonn) {
    return VForTeacherHome(
      teacherId:
          jsonn['teacher_id'] != null ? jsonn['teacher_id'].toString() : '',
      sectionCode:
          jsonn['section_code'] != null ? jsonn['section_code'].toString() : '',
      date: jsonn['date'] != null
          ? DateTime.parse(jsonn['date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      studentId:
          jsonn['student_id'] != null ? jsonn['student_id'].toString() : '',
      firstName:
          jsonn['first_name'] != null ? jsonn['first_name'].toString() : '',
      lastName: jsonn['last_name'] != null ? jsonn['last_name'].toString() : '',
      studentNumber: jsonn['student_number'] != null
          ? jsonn['student_number'].toString()
          : '',
      entryTime: jsonn['entry_time'] != null
          ? DateTime.parse(jsonn['entry_time'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      block: jsonn['block'] != null ? jsonn['block'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      teacherId: teacherId,
      sectionCode: sectionCode,
      date: date,
      studentId: studentId,
      firstName: firstName,
      lastName: lastName,
      studentNumber: studentNumber,
      entryTime: entryTime,
      block: block,
    );
  }
}

class UserRole implements SupadartClass<UserRole> {
  final BigInt id;
  final String userId;
  final ROLE_ENUM role;
  final DateTime createdAt;

  const UserRole({
    required this.id,
    required this.userId,
    required this.role,
    required this.createdAt,
  });

  static String get table_name => 'user_role';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_role => 'role';
  static String get c_createdAt => 'created_at';

  static List<UserRole> converter(List<Map<String, dynamic>> data) {
    return data.map(UserRole.fromJson).toList();
  }

  static UserRole converterSingle(Map<String, dynamic> data) {
    return UserRole.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    String? userId,
    ROLE_ENUM? role,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (userId != null) 'user_id': userId,
      if (role != null) 'role': role.toString().split('.').last,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    required String userId,
    required ROLE_ENUM role,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      role: role,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    String? userId,
    ROLE_ENUM? role,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      role: role,
      createdAt: createdAt,
    );
  }

  factory UserRole.fromJson(Map<String, dynamic> jsonn) {
    return UserRole(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      role: jsonn['role'] != null
          ? ROLE_ENUM.values.byName(jsonn['role'].toString())
          : ROLE_ENUM.values.first,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      role: role,
      createdAt: createdAt,
    );
  }
}

class Messages implements SupadartClass<Messages> {
  final BigInt id;
  final DateTime createdAt;
  final String? content;
  final String? sender;

  const Messages({
    required this.id,
    required this.createdAt,
    this.content,
    this.sender,
  });

  static String get table_name => 'messages';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_content => 'content';
  static String get c_sender => 'sender';

  static List<Messages> converter(List<Map<String, dynamic>> data) {
    return data.map(Messages.fromJson).toList();
  }

  static Messages converterSingle(Map<String, dynamic> data) {
    return Messages.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? content,
    String? sender,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (content != null) 'content': content,
      if (sender != null) 'sender': sender,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    String? content,
    String? sender,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      content: content,
      sender: sender,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? content,
    String? sender,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      content: content,
      sender: sender,
    );
  }

  factory Messages.fromJson(Map<String, dynamic> jsonn) {
    return Messages(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      content: jsonn['content'] != null ? jsonn['content'].toString() : '',
      sender: jsonn['sender'] != null ? jsonn['sender'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      content: content,
      sender: sender,
    );
  }
}

class SchoolTerm implements SupadartClass<SchoolTerm> {
  final BigInt id;
  final DateTime createdAt;
  final String name;
  final DateTime startDate;
  final DateTime endDate;

  const SchoolTerm({
    required this.id,
    required this.createdAt,
    required this.name,
    required this.startDate,
    required this.endDate,
  });

  static String get table_name => 'school_term';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_name => 'name';
  static String get c_startDate => 'start_date';
  static String get c_endDate => 'end_date';

  static List<SchoolTerm> converter(List<Map<String, dynamic>> data) {
    return data.map(SchoolTerm.fromJson).toList();
  }

  static SchoolTerm converterSingle(Map<String, dynamic> data) {
    return SchoolTerm.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? name,
    DateTime? startDate,
    DateTime? endDate,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (name != null) 'name': name,
      if (startDate != null) 'start_date': startDate.toIso8601String(),
      if (endDate != null) 'end_date': endDate.toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    String? name,
    DateTime? startDate,
    DateTime? endDate,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
      startDate: startDate,
      endDate: endDate,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? name,
    DateTime? startDate,
    DateTime? endDate,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
      startDate: startDate,
      endDate: endDate,
    );
  }

  factory SchoolTerm.fromJson(Map<String, dynamic> jsonn) {
    return SchoolTerm(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      startDate: jsonn['start_date'] != null
          ? DateTime.parse(jsonn['start_date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      endDate: jsonn['end_date'] != null
          ? DateTime.parse(jsonn['end_date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
      startDate: startDate,
      endDate: endDate,
    );
  }
}

class Tag implements SupadartClass<Tag> {
  final BigInt id;
  final DateTime createdAt;
  final String? note;
  final String uid;

  const Tag({
    required this.id,
    required this.createdAt,
    this.note,
    required this.uid,
  });

  static String get table_name => 'tag';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_note => 'note';
  static String get c_uid => 'uid';

  static List<Tag> converter(List<Map<String, dynamic>> data) {
    return data.map(Tag.fromJson).toList();
  }

  static Tag converterSingle(Map<String, dynamic> data) {
    return Tag.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? note,
    String? uid,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (note != null) 'note': note,
      if (uid != null) 'uid': uid,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    String? note,
    String? uid,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      note: note,
      uid: uid,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? note,
    String? uid,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      note: note,
      uid: uid,
    );
  }

  factory Tag.fromJson(Map<String, dynamic> jsonn) {
    return Tag(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      note: jsonn['note'] != null ? jsonn['note'].toString() : '',
      uid: jsonn['uid'] != null ? jsonn['uid'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      note: note,
      uid: uid,
    );
  }
}

class Teacher implements SupadartClass<Teacher> {
  final DateTime createdAt;
  final String? firstName;
  final String? lastName;
  final String email;
  final String id;

  const Teacher({
    required this.createdAt,
    this.firstName,
    this.lastName,
    required this.email,
    required this.id,
  });

  static String get table_name => 'teacher';
  static String get c_createdAt => 'created_at';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_email => 'email';
  static String get c_id => 'id';

  static List<Teacher> converter(List<Map<String, dynamic>> data) {
    return data.map(Teacher.fromJson).toList();
  }

  static Teacher converterSingle(Map<String, dynamic> data) {
    return Teacher.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    DateTime? createdAt,
    String? firstName,
    String? lastName,
    String? email,
    String? id,
  }) {
    return {
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (email != null) 'email': email,
      if (id != null) 'id': id,
    };
  }

  static Map<String, dynamic> insert({
    DateTime? createdAt,
    String? firstName,
    String? lastName,
    required String email,
    String? id,
  }) {
    return _generateMap(
      createdAt: createdAt,
      firstName: firstName,
      lastName: lastName,
      email: email,
      id: id,
    );
  }

  static Map<String, dynamic> update({
    DateTime? createdAt,
    String? firstName,
    String? lastName,
    String? email,
    String? id,
  }) {
    return _generateMap(
      createdAt: createdAt,
      firstName: firstName,
      lastName: lastName,
      email: email,
      id: id,
    );
  }

  factory Teacher.fromJson(Map<String, dynamic> jsonn) {
    return Teacher(
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      firstName:
          jsonn['first_name'] != null ? jsonn['first_name'].toString() : '',
      lastName: jsonn['last_name'] != null ? jsonn['last_name'].toString() : '',
      email: jsonn['email'] != null ? jsonn['email'].toString() : '',
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      createdAt: createdAt,
      firstName: firstName,
      lastName: lastName,
      email: email,
      id: id,
    );
  }
}

class SchoolDayType implements SupadartClass<SchoolDayType> {
  final BigInt id;
  final DateTime createdAt;
  final String name;

  const SchoolDayType({
    required this.id,
    required this.createdAt,
    required this.name,
  });

  static String get table_name => 'school_day_type';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_name => 'name';

  static List<SchoolDayType> converter(List<Map<String, dynamic>> data) {
    return data.map(SchoolDayType.fromJson).toList();
  }

  static SchoolDayType converterSingle(Map<String, dynamic> data) {
    return SchoolDayType.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    String? name,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (name != null) 'name': name,
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    String? name,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    String? name,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
    );
  }

  factory SchoolDayType.fromJson(Map<String, dynamic> jsonn) {
    return SchoolDayType(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      name: name,
    );
  }
}

class Attendance implements SupadartClass<Attendance> {
  final BigInt id;
  final DateTime createdAt;
  final BigInt? eventId;
  final BigInt? tagScanId;
  final DateTime? entryTime;
  final DateTime date;
  final BigInt studentEnrolmentId;

  const Attendance({
    required this.id,
    required this.createdAt,
    this.eventId,
    this.tagScanId,
    this.entryTime,
    required this.date,
    required this.studentEnrolmentId,
  });

  static String get table_name => 'attendance';
  static String get c_id => 'id';
  static String get c_createdAt => 'created_at';
  static String get c_eventId => 'event_id';
  static String get c_tagScanId => 'tag_scan_id';
  static String get c_entryTime => 'entry_time';
  static String get c_date => 'date';
  static String get c_studentEnrolmentId => 'student_enrolment_id';

  static List<Attendance> converter(List<Map<String, dynamic>> data) {
    return data.map(Attendance.fromJson).toList();
  }

  static Attendance converterSingle(Map<String, dynamic> data) {
    return Attendance.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    BigInt? id,
    DateTime? createdAt,
    BigInt? eventId,
    BigInt? tagScanId,
    DateTime? entryTime,
    DateTime? date,
    BigInt? studentEnrolmentId,
  }) {
    return {
      if (id != null) 'id': id.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (eventId != null) 'event_id': eventId.toString(),
      if (tagScanId != null) 'tag_scan_id': tagScanId.toString(),
      if (entryTime != null) 'entry_time': entryTime.toUtc().toIso8601String(),
      if (date != null) 'date': date.toIso8601String(),
      if (studentEnrolmentId != null)
        'student_enrolment_id': studentEnrolmentId.toString(),
    };
  }

  static Map<String, dynamic> insert({
    BigInt? id,
    DateTime? createdAt,
    BigInt? eventId,
    BigInt? tagScanId,
    DateTime? entryTime,
    required DateTime date,
    required BigInt studentEnrolmentId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      eventId: eventId,
      tagScanId: tagScanId,
      entryTime: entryTime,
      date: date,
      studentEnrolmentId: studentEnrolmentId,
    );
  }

  static Map<String, dynamic> update({
    BigInt? id,
    DateTime? createdAt,
    BigInt? eventId,
    BigInt? tagScanId,
    DateTime? entryTime,
    DateTime? date,
    BigInt? studentEnrolmentId,
  }) {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      eventId: eventId,
      tagScanId: tagScanId,
      entryTime: entryTime,
      date: date,
      studentEnrolmentId: studentEnrolmentId,
    );
  }

  factory Attendance.fromJson(Map<String, dynamic> jsonn) {
    return Attendance(
      id: jsonn['id'] != null
          ? BigInt.parse(jsonn['id'].toString())
          : BigInt.from(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      eventId: jsonn['event_id'] != null
          ? BigInt.parse(jsonn['event_id'].toString())
          : BigInt.from(0),
      tagScanId: jsonn['tag_scan_id'] != null
          ? BigInt.parse(jsonn['tag_scan_id'].toString())
          : BigInt.from(0),
      entryTime: jsonn['entry_time'] != null
          ? DateTime.parse(jsonn['entry_time'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      date: jsonn['date'] != null
          ? DateTime.parse(jsonn['date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      studentEnrolmentId: jsonn['student_enrolment_id'] != null
          ? BigInt.parse(jsonn['student_enrolment_id'].toString())
          : BigInt.from(0),
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      createdAt: createdAt,
      eventId: eventId,
      tagScanId: tagScanId,
      entryTime: entryTime,
      date: date,
      studentEnrolmentId: studentEnrolmentId,
    );
  }
}
